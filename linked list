class TaskNode:
  def __init__(self, task_name) :
    self.task_name = task_name
    self.next = None

class TaskList:
  def __init__(self):
    self.head = None

  def add_task(self, task_name):
    new_node = TaskNode(task_name)
    new_task = TaskNode (task_name)
    if not self.head:
      self.head = new_task
    else:
      current = self.head
      while current.next:
        current = current.next
      current.next = new_node

  def show_tasks(self):
    if not self.head:
      print("\n Tidak ada mata kuliah hari ini!")
      return

    print("\n Daftar mata kuliah hari ini:")
    current = self.head
    count = 1
    while current:
      print(current.task_name)
      current = current.next
      count += 1

task_list = TaskList()
num_tasks = int(input("Masukkan jadwal mata kuliah hari ini: "))
for i in range(1, num_tasks + 1):
  task_name = input(f"Masukkan mata kuliah ke-{i}: ")
  task_list.add_task(task_name)

task_list.show_tasks()

latihan 2
class PageNode:
  def __init__(self, url):
    self.url = url
    self.next = None
    self.prev = None

class BrowserHistory:
  def __init__(self):
    self.current = None

  def visit_page(self, url):
    new_page = PageNode(url)
    if not self.current:
      self.current = new_page
    else:
      new_page.prev = self.current
      self.current.next = new_page
      self.current = new_page

  def show_history(self):
    if not self.current:
      print("\n Riwayat kosong.")
      return

    print("\n Riwayat peramban web:")
    temp = self.current
    while temp.prev:
      temp = temp.prev

    count = 1
    while temp:
      print(f"{count}. {temp.url}")
      temp = temp.next
      count += 1

  def go_back(self):
    if self.current and self.current.prev:
      self.current = self.current.prev
      print("\n Anda kembali ke: {self.current.url}")
    else:
      print("\n Tidak bisa kembali, ini adalah halaman pertama.")

  def go_forward(self):
    if self.current and self.current.next:
      self.current = self.current.next
      print("\n Anda maju ke: {self.current.url}")
    else:
      print("\n Tidak bisa maju, ini adalah halaman terakhir.")

history = BrowserHistory()
num_pages = int(input("Masukkan jumlah halaman yang kunjungi: "))
for i in range(1, num_pages + 1):
  url = input(f"Masukkan URL halaman ke-{i}: ")
  history.visit_page(url)

history.show_history()

while True:
  command = input("\n Tekan 'b' untuk kembali, Tekan 'f' untuk maju, Tekan 'x' untuk keluar.\nMasukkan perintah: ").lower()
  if command == 'b':
    history.go_back()
  elif command == 'f':
    history.go_forward()
  elif command == 'x':
    print("\n Keluar dari riwayat peramban.")
    break
  else:
    print("\n Perintah tidak dikenal.")

latihan 3
# Definisi Node dalam Singly Linked List
class Node:
    def __init__(self, data):
        self.data = data  # Menyimpan nilai node
        self.next = None  # Pointer ke node berikutnya

# Definisi Singly Linked List dengan Berbagai Operasi
class LinkedList:
    def __init__(self):
        self.head = None  # Awalnya, daftar kosong

    # Menambahkan elemen di awal
    def add_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    # Menambahkan elemen di akhir
    def add_at_end(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        temp = self.head
        while temp.next:
            temp = temp.next
        temp.next = new_node

    # Menambahkan elemen di posisi tertentu
    def add_at_position(self, position, data):
        if position < 0:
            print("\nPosisi tidak valid!")
            return
        new_node = Node(data)
        if position == 0:
            self.add_at_beginning(data)
            return
        temp = self.head
        for _ in range(position - 1):
            if not temp:
                print("\nPosisi melebihi panjang daftar!")
                return
            temp = temp.next
        new_node.next = temp.next
        temp.next = new_node

    # Menghapus elemen di awal
    def delete_at_beginning(self):
        if not self.head:
            print("\nDaftar kosong, tidak ada yang bisa dihapus!")
            return
        self.head = self.head.next

    # Menghapus elemen di akhir
    def delete_at_end(self):
        if not self.head:
            print("\nDaftar kosong, tidak ada yang bisa dihapus!")
            return
        if not self.head.next:
            self.head = None
            return
        temp = self.head
        while temp.next.next:
            temp = temp.next
        temp.next = None

    # Menghapus elemen di posisi tertentu
    def delete_at_position(self, position):
        if not self.head:
            print("\nDaftar kosong, tidak ada yang bisa dihapus!")
            return
        if position == 0:
            self.delete_at_beginning()
            return
        temp = self.head
        for _ in range(position - 1):
            if not temp.next:
                print("\nPosisi tidak ditemukan!")
                return
            temp = temp.next
        if temp.next is None:
            print("\nPosisi tidak ditemukan!")
            return
        temp.next = temp.next.next

    # Mencari elemen dalam Linked List
    def search(self, key):
        temp = self.head
        while temp:
            if temp.data == key:
                print(f"\nElemen {key} ditemukan dalam daftar!")
                return
            temp = temp.next
        print(f"\nElemen {key} tidak ditemukan dalam daftar.")

    # Membalik (reverse) Linked List
    def reverse(self):
        prev = None
        current = self.head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        self.head = prev

    # Menampilkan Linked List
    def display(self):
        if not self.head:
            print("\nDaftar kosong!")
            return
        temp = self.head
        while temp:
            print(temp.data, end=" -> ")
            temp = temp.next
        print("None")

# Program Utama (Main)

# Membuat objek Linked List
ll = LinkedList()

# Meminta pengguna memasukkan elemen awal
try:
    num_elements = int(input("Masukkan jumlah awal elemen dalam daftar: "))
    for i in range(num_elements):
        data = int(input(f"Masukkan data ke-{i+1}: "))
        ll.add_at_end(data)
except ValueError:
    print("Input tidak valid! Harap masukkan angka.")

# Menu Operasi Linked List
while True:
    print("\n=== Pilih Operasi ===")
    print("1. Tambah elemen di awal")
    print("2. Tambah elemen di akhir")
    print("3. Tambah elemen di posisi tertentu")
    print("4. Hapus elemen di awal")
    print("5. Hapus elemen di akhir")
    print("6. Hapus elemen di posisi tertentu")
    print("7. Cari elemen dalam daftar")
    print("8. Balik elemen dalam daftar")
    print("9. Tampilkan daftar")
    print("0. Keluar")

    try:
        choice = int(input("\nMasukkan pilihan: "))

        if choice == 1:
            data = int(input("Masukkan data yang ingin ditambahkan di awal: "))
            ll.add_at_beginning(data)
        elif choice == 2:
            data = int(input("Masukkan data yang ingin ditambahkan di akhir: "))
            ll.add_at_end(data)
        elif choice == 3:
            position = int(input("Masukkan posisi untuk menambahkan data: "))
            data = int(input("Masukkan data: "))
            ll.add_at_position(position, data)
        elif choice == 4:
            ll.delete_at_beginning()
        elif choice == 5:
            ll.delete_at_end()
        elif choice == 6:
            position = int(input("Masukkan posisi elemen yang ingin dihapus: "))
            ll.delete_at_position(position)
        elif choice == 7:
            key = int(input("Masukkan elemen yang ingin dicari: "))
            ll.search(key)
        elif choice == 8:
            ll.reverse()
            print("\nLinked List berhasil dibalik!")
        elif choice == 9:
            ll.display()
        elif choice == 0:
            print("\nKeluar dari program.")
            break
        else:
            print("\nPilihan tidak valid, silakan coba lagi!")
    except ValueError:
        print("Input tidak valid! Harap masukkan angka.")

tugas
def buat_jadwal_piket(satpam):
    jadwal = []
    num_sap = len(satpam)
    
    for hari in range(14):
        sap = satpam[hari % num_sap]  
        jadwal.append(f"Hari {hari + 1}: {sap}")
        
    return jadwal

satpam1 = input("Masukkan nama satpam ke-1: ")
satpam2 = input("Masukkan nama satpam ke-2: ")
satpam3 = input("Masukkan nama satpam ke-3: ")
satpam4 = input("Masukkan nama satpam ke-4: ")

satpam_list = [satpam1, satpam2, satpam3, satpam4]

jadwal_piket = buat_jadwal_piket(satpam_list)

print("\n~ Jadwal Piket Satpam Selama 2 Minggu:")
for item in jadwal_piket:
    print(item)
